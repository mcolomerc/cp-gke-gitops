apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: {{ .Release.Namespace }}
spec:
  #Â license:
  #  globalLicense: true
  replicas: {{ .Values.kafka.replicas }}
  oneReplicaPerNode: true
  image:
    application: confluentinc/cp-server:{{ .Values.version }}
    init: confluentinc/confluent-init-container:{{ .Values.initcontainer.version }}
  dataVolumeCapacity: 10Gi 
  configOverrides:
    server:
      - "confluent.license.topic.replication.factor={{ .Values.kafka.replicas }}"
      - "confluent.metrics.reporter.topic.replicas={{ .Values.kafka.replicas }}"
      - "confluent.tier.metadata.replication.factor={{ .Values.kafka.replicas }}"
      - "confluent.metadata.topic.replication.factor={{ .Values.kafka.replicas }}"
      - "confluent.balancer.topic.replication.factor={{ .Values.kafka.replicas }}"
      - "confluent.security.event.logger.exporter.kafka.topic.replicas={{ .Values.kafka.replicas }}"
      - "event.logger.exporter.kafka.topic.replicas={{ .Values.kafka.replicas }}"
      - "offsets.topic.replication.factor={{ .Values.kafka.replicas }}" 
      - "confluent.metadata.server.urls.fail.on.401=true"
      - "confluent.metadata.server.urls.max.retries=3" 
  tls:
    secretRef: kafka-tls
  listeners:
    internal:
      authentication:
        type: mtls  
        principalMappingRules: 
          - RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/
      tls:
        enabled: true 
    external:
      authentication:
        type: mtls  
        principalMappingRules: 
          - RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/
      tls:
        enabled: true 
      externalAccess:
        type: staticForHostBasedRouting
        staticForHostBasedRouting:
          domain: {{ .Values.network.domain }}
          port: 443
  authorization:
    type: rbac
    superUsers:
    - User:kafka
  services:
    mds:
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: mds-token
      provider:
        type: ldap
        ldap:
          address: ldap://ldap.{{ .Values.ldap.namespace }}.svc.cluster.local:389
          authentication:
            type: simple
            simple:
              secretRef: credential
          configurations:
            groupNameAttribute: cn
            groupObjectClass: group
            groupMemberAttribute: member
            groupMemberAttributePattern: CN=(.*),DC=test,DC=com
            groupSearchBase: dc=test,dc=com
            userNameAttribute: cn
            userMemberOfAttributePattern: CN=(.*),DC=test,DC=com
            userObjectClass: organizationalRole
            userSearchBase: dc=test,dc=com
  dependencies:
    kafkaRest:
      authentication:
        type: bearer
        bearer:
          secretRef: mds-client
    zookeeper:
      endpoint: zookeeper.{{ .Release.Namespace }}.svc.cluster.local:2182
      authentication:
        type: mtls
      tls:
        enabled: true